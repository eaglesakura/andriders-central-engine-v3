package com.eaglesakura.andriders.dao.plugin;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eaglesakura.andriders.dao.plugin.DbActivePlugin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DB_ACTIVE_PLUGIN.
*/
public class DbActivePluginDao extends AbstractDao<DbActivePlugin, String> {

    public static final String TABLENAME = "DB_ACTIVE_PLUGIN";

    /**
     * Properties of entity DbActivePlugin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property Category = new Property(1, String.class, "category", false, "CATEGORY");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property ClassName = new Property(3, String.class, "className", false, "CLASS_NAME");
    };


    public DbActivePluginDao(DaoConfig config) {
        super(config);
    }
    
    public DbActivePluginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DB_ACTIVE_PLUGIN' (" + //
                "'UNIQUE_ID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uniqueId
                "'CATEGORY' TEXT NOT NULL ," + // 1: category
                "'PACKAGE_NAME' TEXT NOT NULL ," + // 2: packageName
                "'CLASS_NAME' TEXT NOT NULL );"); // 3: className
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_ACTIVE_PLUGIN_CATEGORY ON DB_ACTIVE_PLUGIN" +
                " (CATEGORY);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_ACTIVE_PLUGIN_PACKAGE_NAME ON DB_ACTIVE_PLUGIN" +
                " (PACKAGE_NAME);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_ACTIVE_PLUGIN_CLASS_NAME ON DB_ACTIVE_PLUGIN" +
                " (CLASS_NAME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_ACTIVE_PLUGIN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbActivePlugin entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindString(2, entity.getCategory());
        stmt.bindString(3, entity.getPackageName());
        stmt.bindString(4, entity.getClassName());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbActivePlugin readEntity(Cursor cursor, int offset) {
        DbActivePlugin entity = new DbActivePlugin( //
            cursor.getString(offset + 0), // uniqueId
            cursor.getString(offset + 1), // category
            cursor.getString(offset + 2), // packageName
            cursor.getString(offset + 3) // className
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbActivePlugin entity, int offset) {
        entity.setUniqueId(cursor.getString(offset + 0));
        entity.setCategory(cursor.getString(offset + 1));
        entity.setPackageName(cursor.getString(offset + 2));
        entity.setClassName(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbActivePlugin entity, long rowId) {
        return entity.getUniqueId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbActivePlugin entity) {
        if(entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
