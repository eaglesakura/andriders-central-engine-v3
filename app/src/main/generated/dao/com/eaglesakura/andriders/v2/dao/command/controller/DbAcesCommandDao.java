package com.eaglesakura.andriders.v2.dao.command.controller;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DB_ACES_COMMAND.
 */
public class DbAcesCommandDao extends AbstractDao<DbAcesCommand, String> {

    public static final String TABLENAME = "DB_ACES_COMMAND";

    /**
     * Properties of entity DbAcesCommand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommandKey = new Property(0, String.class, "commandKey", true, "COMMAND_KEY");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property IconPng = new Property(2, byte[].class, "iconPng", false, "ICON_PNG");
        public final static Property AppExtraKey = new Property(3, String.class, "appExtraKey", false, "APP_EXTRA_KEY");
        public final static Property IntentData = new Property(4, byte[].class, "intentData", false, "INTENT_DATA");
        public final static Property TimerIntervalMin = new Property(5, Double.class, "timerIntervalMin", false, "TIMER_INTERVAL_MIN");
        public final static Property TimerSyncRealTime = new Property(6, Boolean.class, "timerSyncRealTime", false, "TIMER_SYNC_REAL_TIME");
        public final static Property DistanceIntervalKm = new Property(7, Double.class, "distanceIntervalKm", false, "DISTANCE_INTERVAL_KM");
        public final static Property DistanceIntervalType = new Property(8, Integer.class, "distanceIntervalType", false, "DISTANCE_INTERVAL_TYPE");
        public final static Property DistanceCommandLoopNum = new Property(9, Integer.class, "distanceCommandLoopNum", false, "DISTANCE_COMMAND_LOOP_NUM");
        public final static Property SpeedType = new Property(10, Integer.class, "speedType", false, "SPEED_TYPE");
        public final static Property SpeedKmh = new Property(11, Double.class, "speedKmh", false, "SPEED_KMH");
    }

    ;


    public DbAcesCommandDao(DaoConfig config) {
        super(config);
    }

    public DbAcesCommandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'DB_ACES_COMMAND' (" + //
                "'COMMAND_KEY' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: commandKey
                "'PACKAGE_NAME' TEXT NOT NULL ," + // 1: packageName
                "'ICON_PNG' BLOB NOT NULL ," + // 2: iconPng
                "'APP_EXTRA_KEY' TEXT NOT NULL ," + // 3: appExtraKey
                "'INTENT_DATA' BLOB," + // 4: intentData
                "'TIMER_INTERVAL_MIN' REAL," + // 5: timerIntervalMin
                "'TIMER_SYNC_REAL_TIME' INTEGER," + // 6: timerSyncRealTime
                "'DISTANCE_INTERVAL_KM' REAL," + // 7: distanceIntervalKm
                "'DISTANCE_INTERVAL_TYPE' INTEGER," + // 8: distanceIntervalType
                "'DISTANCE_COMMAND_LOOP_NUM' INTEGER," + // 9: distanceCommandLoopNum
                "'SPEED_TYPE' INTEGER," + // 10: speedType
                "'SPEED_KMH' REAL);"); // 11: speedKmh
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_ACES_COMMAND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbAcesCommand entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCommandKey());
        stmt.bindString(2, entity.getPackageName());
        stmt.bindBlob(3, entity.getIconPng());
        stmt.bindString(4, entity.getAppExtraKey());

        byte[] intentData = entity.getIntentData();
        if (intentData != null) {
            stmt.bindBlob(5, intentData);
        }

        Double timerIntervalMin = entity.getTimerIntervalMin();
        if (timerIntervalMin != null) {
            stmt.bindDouble(6, timerIntervalMin);
        }

        Boolean timerSyncRealTime = entity.getTimerSyncRealTime();
        if (timerSyncRealTime != null) {
            stmt.bindLong(7, timerSyncRealTime ? 1l : 0l);
        }

        Double distanceIntervalKm = entity.getDistanceIntervalKm();
        if (distanceIntervalKm != null) {
            stmt.bindDouble(8, distanceIntervalKm);
        }

        Integer distanceIntervalType = entity.getDistanceIntervalType();
        if (distanceIntervalType != null) {
            stmt.bindLong(9, distanceIntervalType);
        }

        Integer distanceCommandLoopNum = entity.getDistanceCommandLoopNum();
        if (distanceCommandLoopNum != null) {
            stmt.bindLong(10, distanceCommandLoopNum);
        }

        Integer speedType = entity.getSpeedType();
        if (speedType != null) {
            stmt.bindLong(11, speedType);
        }

        Double speedKmh = entity.getSpeedKmh();
        if (speedKmh != null) {
            stmt.bindDouble(12, speedKmh);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public DbAcesCommand readEntity(Cursor cursor, int offset) {
        DbAcesCommand entity = new DbAcesCommand( //
                cursor.getString(offset + 0), // commandKey
                cursor.getString(offset + 1), // packageName
                cursor.getBlob(offset + 2), // iconPng
                cursor.getString(offset + 3), // appExtraKey
                cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // intentData
                cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // timerIntervalMin
                cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // timerSyncRealTime
                cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // distanceIntervalKm
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // distanceIntervalType
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // distanceCommandLoopNum
                cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // speedType
                cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11) // speedKmh
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbAcesCommand entity, int offset) {
        entity.setCommandKey(cursor.getString(offset + 0));
        entity.setPackageName(cursor.getString(offset + 1));
        entity.setIconPng(cursor.getBlob(offset + 2));
        entity.setAppExtraKey(cursor.getString(offset + 3));
        entity.setIntentData(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setTimerIntervalMin(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setTimerSyncRealTime(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setDistanceIntervalKm(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setDistanceIntervalType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDistanceCommandLoopNum(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSpeedType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSpeedKmh(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
    }

    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbAcesCommand entity, long rowId) {
        return entity.getCommandKey();
    }

    /** @inheritdoc */
    @Override
    public String getKey(DbAcesCommand entity) {
        if (entity != null) {
            return entity.getCommandKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
