package com.eaglesakura.andriders.dao.session;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eaglesakura.andriders.dao.session.DbSessionLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DB_SESSION_LOG.
*/
public class DbSessionLogDao extends AbstractDao<DbSessionLog, String> {

    public static final String TABLENAME = "DB_SESSION_LOG";

    /**
     * Properties of entity DbSessionLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SessionId = new Property(0, String.class, "sessionId", true, "SESSION_ID");
        public final static Property ProfileId = new Property(1, String.class, "profileId", false, "PROFILE_ID");
        public final static Property GoogleFitUploaded = new Property(2, boolean.class, "googleFitUploaded", false, "GOOGLE_FIT_UPLOADED");
        public final static Property StartTime = new Property(3, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property ActiveTimeMs = new Property(5, long.class, "activeTimeMs", false, "ACTIVE_TIME_MS");
        public final static Property MaxSpeedKmh = new Property(6, double.class, "maxSpeedKmh", false, "MAX_SPEED_KMH");
        public final static Property MaxCadence = new Property(7, int.class, "maxCadence", false, "MAX_CADENCE");
        public final static Property MaxHeartrate = new Property(8, int.class, "maxHeartrate", false, "MAX_HEARTRATE");
        public final static Property SumDistanceKm = new Property(9, double.class, "sumDistanceKm", false, "SUM_DISTANCE_KM");
        public final static Property Calories = new Property(10, double.class, "calories", false, "CALORIES");
        public final static Property Exercise = new Property(11, double.class, "exercise", false, "EXERCISE");
        public final static Property SumAltitude = new Property(12, double.class, "sumAltitude", false, "SUM_ALTITUDE");
        public final static Property ExtraPayload = new Property(13, byte[].class, "extraPayload", false, "EXTRA_PAYLOAD");
    };


    public DbSessionLogDao(DaoConfig config) {
        super(config);
    }
    
    public DbSessionLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DB_SESSION_LOG' (" + //
                "'SESSION_ID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: sessionId
                "'PROFILE_ID' TEXT NOT NULL ," + // 1: profileId
                "'GOOGLE_FIT_UPLOADED' INTEGER NOT NULL ," + // 2: googleFitUploaded
                "'START_TIME' INTEGER NOT NULL ," + // 3: startTime
                "'END_TIME' INTEGER NOT NULL ," + // 4: endTime
                "'ACTIVE_TIME_MS' INTEGER NOT NULL ," + // 5: activeTimeMs
                "'MAX_SPEED_KMH' REAL NOT NULL ," + // 6: maxSpeedKmh
                "'MAX_CADENCE' INTEGER NOT NULL ," + // 7: maxCadence
                "'MAX_HEARTRATE' INTEGER NOT NULL ," + // 8: maxHeartrate
                "'SUM_DISTANCE_KM' REAL NOT NULL ," + // 9: sumDistanceKm
                "'CALORIES' REAL NOT NULL ," + // 10: calories
                "'EXERCISE' REAL NOT NULL ," + // 11: exercise
                "'SUM_ALTITUDE' REAL NOT NULL ," + // 12: sumAltitude
                "'EXTRA_PAYLOAD' BLOB NOT NULL );"); // 13: extraPayload
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_SESSION_LOG_ACTIVE_TIME_MS ON DB_SESSION_LOG" +
                " (ACTIVE_TIME_MS);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_SESSION_LOG_MAX_SPEED_KMH ON DB_SESSION_LOG" +
                " (MAX_SPEED_KMH);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_SESSION_LOG_SUM_DISTANCE_KM ON DB_SESSION_LOG" +
                " (SUM_DISTANCE_KM);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_SESSION_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbSessionLog entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSessionId());
        stmt.bindString(2, entity.getProfileId());
        stmt.bindLong(3, entity.getGoogleFitUploaded() ? 1l: 0l);
        stmt.bindLong(4, entity.getStartTime().getTime());
        stmt.bindLong(5, entity.getEndTime().getTime());
        stmt.bindLong(6, entity.getActiveTimeMs());
        stmt.bindDouble(7, entity.getMaxSpeedKmh());
        stmt.bindLong(8, entity.getMaxCadence());
        stmt.bindLong(9, entity.getMaxHeartrate());
        stmt.bindDouble(10, entity.getSumDistanceKm());
        stmt.bindDouble(11, entity.getCalories());
        stmt.bindDouble(12, entity.getExercise());
        stmt.bindDouble(13, entity.getSumAltitude());
        stmt.bindBlob(14, entity.getExtraPayload());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbSessionLog readEntity(Cursor cursor, int offset) {
        DbSessionLog entity = new DbSessionLog( //
            cursor.getString(offset + 0), // sessionId
            cursor.getString(offset + 1), // profileId
            cursor.getShort(offset + 2) != 0, // googleFitUploaded
            new java.util.Date(cursor.getLong(offset + 3)), // startTime
            new java.util.Date(cursor.getLong(offset + 4)), // endTime
            cursor.getLong(offset + 5), // activeTimeMs
            cursor.getDouble(offset + 6), // maxSpeedKmh
            cursor.getInt(offset + 7), // maxCadence
            cursor.getInt(offset + 8), // maxHeartrate
            cursor.getDouble(offset + 9), // sumDistanceKm
            cursor.getDouble(offset + 10), // calories
            cursor.getDouble(offset + 11), // exercise
            cursor.getDouble(offset + 12), // sumAltitude
            cursor.getBlob(offset + 13) // extraPayload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbSessionLog entity, int offset) {
        entity.setSessionId(cursor.getString(offset + 0));
        entity.setProfileId(cursor.getString(offset + 1));
        entity.setGoogleFitUploaded(cursor.getShort(offset + 2) != 0);
        entity.setStartTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndTime(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setActiveTimeMs(cursor.getLong(offset + 5));
        entity.setMaxSpeedKmh(cursor.getDouble(offset + 6));
        entity.setMaxCadence(cursor.getInt(offset + 7));
        entity.setMaxHeartrate(cursor.getInt(offset + 8));
        entity.setSumDistanceKm(cursor.getDouble(offset + 9));
        entity.setCalories(cursor.getDouble(offset + 10));
        entity.setExercise(cursor.getDouble(offset + 11));
        entity.setSumAltitude(cursor.getDouble(offset + 12));
        entity.setExtraPayload(cursor.getBlob(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbSessionLog entity, long rowId) {
        return entity.getSessionId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbSessionLog entity) {
        if(entity != null) {
            return entity.getSessionId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
