package com.eaglesakura.andriders.dao.session;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eaglesakura.andriders.dao.session.DbCycleDateLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DB_CYCLE_DATE_LOG.
*/
public class DbCycleDateLogDao extends AbstractDao<DbCycleDateLog, String> {

    public static final String TABLENAME = "DB_CYCLE_DATE_LOG";

    /**
     * Properties of entity DbCycleDateLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property SessionCount = new Property(1, int.class, "sessionCount", false, "SESSION_COUNT");
        public final static Property StartTime = new Property(2, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property ActiveTimeMs = new Property(4, long.class, "activeTimeMs", false, "ACTIVE_TIME_MS");
        public final static Property MaxSpeedKmh = new Property(5, double.class, "maxSpeedKmh", false, "MAX_SPEED_KMH");
        public final static Property MaxCadence = new Property(6, int.class, "maxCadence", false, "MAX_CADENCE");
        public final static Property MaxHeartrate = new Property(7, int.class, "maxHeartrate", false, "MAX_HEARTRATE");
        public final static Property SumDistanceKm = new Property(8, double.class, "sumDistanceKm", false, "SUM_DISTANCE_KM");
        public final static Property Calories = new Property(9, double.class, "calories", false, "CALORIES");
        public final static Property Exercise = new Property(10, double.class, "exercise", false, "EXERCISE");
        public final static Property SumAltitude = new Property(11, double.class, "sumAltitude", false, "SUM_ALTITUDE");
        public final static Property ExtraPayload = new Property(12, byte[].class, "extraPayload", false, "EXTRA_PAYLOAD");
    };


    public DbCycleDateLogDao(DaoConfig config) {
        super(config);
    }
    
    public DbCycleDateLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DB_CYCLE_DATE_LOG' (" + //
                "'UNIQUE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: uniqueId
                "'SESSION_COUNT' INTEGER NOT NULL ," + // 1: sessionCount
                "'START_TIME' INTEGER NOT NULL ," + // 2: startTime
                "'END_TIME' INTEGER NOT NULL ," + // 3: endTime
                "'ACTIVE_TIME_MS' INTEGER NOT NULL ," + // 4: activeTimeMs
                "'MAX_SPEED_KMH' REAL NOT NULL ," + // 5: maxSpeedKmh
                "'MAX_CADENCE' INTEGER NOT NULL ," + // 6: maxCadence
                "'MAX_HEARTRATE' INTEGER NOT NULL ," + // 7: maxHeartrate
                "'SUM_DISTANCE_KM' REAL NOT NULL ," + // 8: sumDistanceKm
                "'CALORIES' REAL NOT NULL ," + // 9: calories
                "'EXERCISE' REAL NOT NULL ," + // 10: exercise
                "'SUM_ALTITUDE' REAL NOT NULL ," + // 11: sumAltitude
                "'EXTRA_PAYLOAD' BLOB NOT NULL );"); // 12: extraPayload
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_CYCLE_DATE_LOG_UNIQUE_ID ON DB_CYCLE_DATE_LOG" +
                " (UNIQUE_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_CYCLE_DATE_LOG_ACTIVE_TIME_MS ON DB_CYCLE_DATE_LOG" +
                " (ACTIVE_TIME_MS);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_CYCLE_DATE_LOG_MAX_SPEED_KMH ON DB_CYCLE_DATE_LOG" +
                " (MAX_SPEED_KMH);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_CYCLE_DATE_LOG_SUM_DISTANCE_KM ON DB_CYCLE_DATE_LOG" +
                " (SUM_DISTANCE_KM);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_CYCLE_DATE_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbCycleDateLog entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindLong(2, entity.getSessionCount());
        stmt.bindLong(3, entity.getStartTime().getTime());
        stmt.bindLong(4, entity.getEndTime().getTime());
        stmt.bindLong(5, entity.getActiveTimeMs());
        stmt.bindDouble(6, entity.getMaxSpeedKmh());
        stmt.bindLong(7, entity.getMaxCadence());
        stmt.bindLong(8, entity.getMaxHeartrate());
        stmt.bindDouble(9, entity.getSumDistanceKm());
        stmt.bindDouble(10, entity.getCalories());
        stmt.bindDouble(11, entity.getExercise());
        stmt.bindDouble(12, entity.getSumAltitude());
        stmt.bindBlob(13, entity.getExtraPayload());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbCycleDateLog readEntity(Cursor cursor, int offset) {
        DbCycleDateLog entity = new DbCycleDateLog( //
            cursor.getString(offset + 0), // uniqueId
            cursor.getInt(offset + 1), // sessionCount
            new java.util.Date(cursor.getLong(offset + 2)), // startTime
            new java.util.Date(cursor.getLong(offset + 3)), // endTime
            cursor.getLong(offset + 4), // activeTimeMs
            cursor.getDouble(offset + 5), // maxSpeedKmh
            cursor.getInt(offset + 6), // maxCadence
            cursor.getInt(offset + 7), // maxHeartrate
            cursor.getDouble(offset + 8), // sumDistanceKm
            cursor.getDouble(offset + 9), // calories
            cursor.getDouble(offset + 10), // exercise
            cursor.getDouble(offset + 11), // sumAltitude
            cursor.getBlob(offset + 12) // extraPayload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbCycleDateLog entity, int offset) {
        entity.setUniqueId(cursor.getString(offset + 0));
        entity.setSessionCount(cursor.getInt(offset + 1));
        entity.setStartTime(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEndTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setActiveTimeMs(cursor.getLong(offset + 4));
        entity.setMaxSpeedKmh(cursor.getDouble(offset + 5));
        entity.setMaxCadence(cursor.getInt(offset + 6));
        entity.setMaxHeartrate(cursor.getInt(offset + 7));
        entity.setSumDistanceKm(cursor.getDouble(offset + 8));
        entity.setCalories(cursor.getDouble(offset + 9));
        entity.setExercise(cursor.getDouble(offset + 10));
        entity.setSumAltitude(cursor.getDouble(offset + 11));
        entity.setExtraPayload(cursor.getBlob(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbCycleDateLog entity, long rowId) {
        return entity.getUniqueId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbCycleDateLog entity) {
        if(entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
