package com.eaglesakura.andriders.dao.command;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eaglesakura.andriders.dao.command.DbCommand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DB_COMMAND.
*/
public class DbCommandDao extends AbstractDao<DbCommand, String> {

    public static final String TABLENAME = "DB_COMMAND";

    /**
     * Properties of entity DbCommand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CommandKey = new Property(0, String.class, "commandKey", true, "COMMAND_KEY");
        public final static Property Category = new Property(1, int.class, "category", false, "CATEGORY");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property IconPng = new Property(3, byte[].class, "iconPng", false, "ICON_PNG");
        public final static Property AppExtraKey = new Property(4, String.class, "appExtraKey", false, "APP_EXTRA_KEY");
        public final static Property CommandData = new Property(5, byte[].class, "commandData", false, "COMMAND_DATA");
        public final static Property IntentData = new Property(6, byte[].class, "intentData", false, "INTENT_DATA");
    };


    public DbCommandDao(DaoConfig config) {
        super(config);
    }
    
    public DbCommandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DB_COMMAND' (" + //
                "'COMMAND_KEY' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: commandKey
                "'CATEGORY' INTEGER NOT NULL ," + // 1: category
                "'PACKAGE_NAME' TEXT NOT NULL ," + // 2: packageName
                "'ICON_PNG' BLOB NOT NULL ," + // 3: iconPng
                "'APP_EXTRA_KEY' TEXT NOT NULL ," + // 4: appExtraKey
                "'COMMAND_DATA' BLOB," + // 5: commandData
                "'INTENT_DATA' BLOB);"); // 6: intentData
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_COMMAND_CATEGORY ON DB_COMMAND" +
                " (CATEGORY);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_COMMAND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbCommand entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCommandKey());
        stmt.bindLong(2, entity.getCategory());
        stmt.bindString(3, entity.getPackageName());
        stmt.bindBlob(4, entity.getIconPng());
        stmt.bindString(5, entity.getAppExtraKey());
 
        byte[] commandData = entity.getCommandData();
        if (commandData != null) {
            stmt.bindBlob(6, commandData);
        }
 
        byte[] intentData = entity.getIntentData();
        if (intentData != null) {
            stmt.bindBlob(7, intentData);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbCommand readEntity(Cursor cursor, int offset) {
        DbCommand entity = new DbCommand( //
            cursor.getString(offset + 0), // commandKey
            cursor.getInt(offset + 1), // category
            cursor.getString(offset + 2), // packageName
            cursor.getBlob(offset + 3), // iconPng
            cursor.getString(offset + 4), // appExtraKey
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5), // commandData
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6) // intentData
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbCommand entity, int offset) {
        entity.setCommandKey(cursor.getString(offset + 0));
        entity.setCategory(cursor.getInt(offset + 1));
        entity.setPackageName(cursor.getString(offset + 2));
        entity.setIconPng(cursor.getBlob(offset + 3));
        entity.setAppExtraKey(cursor.getString(offset + 4));
        entity.setCommandData(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
        entity.setIntentData(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbCommand entity, long rowId) {
        return entity.getCommandKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbCommand entity) {
        if(entity != null) {
            return entity.getCommandKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
