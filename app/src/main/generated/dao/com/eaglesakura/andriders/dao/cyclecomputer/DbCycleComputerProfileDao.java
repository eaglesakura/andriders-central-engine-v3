package com.eaglesakura.andriders.dao.cyclecomputer;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DB_CYCLE_COMPUTER_PROFILE.
 */
public class DbCycleComputerProfileDao extends AbstractDao<DbCycleComputerProfile, String> {

    public static final String TABLENAME = "DB_CYCLE_COMPUTER_PROFILE";

    /**
     * Properties of entity DbCycleComputerProfile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property CreatedDate = new Property(1, java.util.Date.class, "createdDate", false, "CREATED_DATE");
        public final static Property ModifiedDate = new Property(2, java.util.Date.class, "modifiedDate", false, "MODIFIED_DATE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property LayoutType = new Property(5, int.class, "layoutType", false, "LAYOUT_TYPE");
        public final static Property LayoutData = new Property(6, byte[].class, "layoutData", false, "LAYOUT_DATA");
        public final static Property TargetPackage = new Property(7, String.class, "targetPackage", false, "TARGET_PACKAGE");
    }

    ;


    public DbCycleComputerProfileDao(DaoConfig config) {
        super(config);
    }

    public DbCycleComputerProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'DB_CYCLE_COMPUTER_PROFILE' (" + //
                "'UNIQUE_ID' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uniqueId
                "'CREATED_DATE' INTEGER NOT NULL ," + // 1: createdDate
                "'MODIFIED_DATE' INTEGER NOT NULL ," + // 2: modifiedDate
                "'NAME' TEXT NOT NULL ," + // 3: name
                "'DESCRIPTION' TEXT NOT NULL ," + // 4: description
                "'LAYOUT_TYPE' INTEGER NOT NULL ," + // 5: layoutType
                "'LAYOUT_DATA' BLOB NOT NULL ," + // 6: layoutData
                "'TARGET_PACKAGE' TEXT);"); // 7: targetPackage
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_CYCLE_COMPUTER_PROFILE_UNIQUE_ID ON DB_CYCLE_COMPUTER_PROFILE" +
                " (UNIQUE_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_CYCLE_COMPUTER_PROFILE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbCycleComputerProfile entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindLong(2, entity.getCreatedDate().getTime());
        stmt.bindLong(3, entity.getModifiedDate().getTime());
        stmt.bindString(4, entity.getName());
        stmt.bindString(5, entity.getDescription());
        stmt.bindLong(6, entity.getLayoutType());
        stmt.bindBlob(7, entity.getLayoutData());

        String targetPackage = entity.getTargetPackage();
        if (targetPackage != null) {
            stmt.bindString(8, targetPackage);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public DbCycleComputerProfile readEntity(Cursor cursor, int offset) {
        DbCycleComputerProfile entity = new DbCycleComputerProfile( //
                cursor.getString(offset + 0), // uniqueId
                new java.util.Date(cursor.getLong(offset + 1)), // createdDate
                new java.util.Date(cursor.getLong(offset + 2)), // modifiedDate
                cursor.getString(offset + 3), // name
                cursor.getString(offset + 4), // description
                cursor.getInt(offset + 5), // layoutType
                cursor.getBlob(offset + 6), // layoutData
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // targetPackage
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbCycleComputerProfile entity, int offset) {
        entity.setUniqueId(cursor.getString(offset + 0));
        entity.setCreatedDate(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setModifiedDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setName(cursor.getString(offset + 3));
        entity.setDescription(cursor.getString(offset + 4));
        entity.setLayoutType(cursor.getInt(offset + 5));
        entity.setLayoutData(cursor.getBlob(offset + 6));
        entity.setTargetPackage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
    }

    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbCycleComputerProfile entity, long rowId) {
        return entity.getUniqueId();
    }

    /** @inheritdoc */
    @Override
    public String getKey(DbCycleComputerProfile entity) {
        if (entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
