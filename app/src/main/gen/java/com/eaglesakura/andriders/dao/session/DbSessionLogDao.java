package com.eaglesakura.andriders.dao.session;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_SESSION_LOG".
*/
public class DbSessionLogDao extends AbstractDao<DbSessionLog, String> {

    public static final String TABLENAME = "DB_SESSION_LOG";

    /**
     * Properties of entity DbSessionLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SessionId = new Property(0, String.class, "sessionId", true, "SESSION_ID");
        public final static Property Flags = new Property(1, String.class, "flags", false, "FLAGS");
        public final static Property StartTime = new Property(2, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property ActiveTimeMs = new Property(4, long.class, "activeTimeMs", false, "ACTIVE_TIME_MS");
        public final static Property ActiveDistanceKm = new Property(5, double.class, "activeDistanceKm", false, "ACTIVE_DISTANCE_KM");
        public final static Property MaxSpeedKmh = new Property(6, double.class, "maxSpeedKmh", false, "MAX_SPEED_KMH");
        public final static Property MaxCadence = new Property(7, int.class, "maxCadence", false, "MAX_CADENCE");
        public final static Property MaxHeartrate = new Property(8, int.class, "maxHeartrate", false, "MAX_HEARTRATE");
        public final static Property SumAltitude = new Property(9, double.class, "sumAltitude", false, "SUM_ALTITUDE");
        public final static Property SumDistanceKm = new Property(10, double.class, "sumDistanceKm", false, "SUM_DISTANCE_KM");
        public final static Property Calories = new Property(11, double.class, "calories", false, "CALORIES");
        public final static Property Exercise = new Property(12, double.class, "exercise", false, "EXERCISE");
    };


    public DbSessionLogDao(DaoConfig config) {
        super(config);
    }
    
    public DbSessionLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_SESSION_LOG\" (" + //
                "\"SESSION_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: sessionId
                "\"FLAGS\" TEXT," + // 1: flags
                "\"START_TIME\" INTEGER NOT NULL ," + // 2: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 3: endTime
                "\"ACTIVE_TIME_MS\" INTEGER NOT NULL ," + // 4: activeTimeMs
                "\"ACTIVE_DISTANCE_KM\" REAL NOT NULL ," + // 5: activeDistanceKm
                "\"MAX_SPEED_KMH\" REAL NOT NULL ," + // 6: maxSpeedKmh
                "\"MAX_CADENCE\" INTEGER NOT NULL ," + // 7: maxCadence
                "\"MAX_HEARTRATE\" INTEGER NOT NULL ," + // 8: maxHeartrate
                "\"SUM_ALTITUDE\" REAL NOT NULL ," + // 9: sumAltitude
                "\"SUM_DISTANCE_KM\" REAL NOT NULL ," + // 10: sumDistanceKm
                "\"CALORIES\" REAL NOT NULL ," + // 11: calories
                "\"EXERCISE\" REAL NOT NULL );"); // 12: exercise
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_SESSION_LOG_FLAGS ON DB_SESSION_LOG" +
                " (\"FLAGS\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_SESSION_LOG_MAX_SPEED_KMH ON DB_SESSION_LOG" +
                " (\"MAX_SPEED_KMH\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_SESSION_LOG_SUM_DISTANCE_KM ON DB_SESSION_LOG" +
                " (\"SUM_DISTANCE_KM\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_SESSION_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbSessionLog entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSessionId());
 
        String flags = entity.getFlags();
        if (flags != null) {
            stmt.bindString(2, flags);
        }
        stmt.bindLong(3, entity.getStartTime().getTime());
        stmt.bindLong(4, entity.getEndTime().getTime());
        stmt.bindLong(5, entity.getActiveTimeMs());
        stmt.bindDouble(6, entity.getActiveDistanceKm());
        stmt.bindDouble(7, entity.getMaxSpeedKmh());
        stmt.bindLong(8, entity.getMaxCadence());
        stmt.bindLong(9, entity.getMaxHeartrate());
        stmt.bindDouble(10, entity.getSumAltitude());
        stmt.bindDouble(11, entity.getSumDistanceKm());
        stmt.bindDouble(12, entity.getCalories());
        stmt.bindDouble(13, entity.getExercise());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbSessionLog entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSessionId());
 
        String flags = entity.getFlags();
        if (flags != null) {
            stmt.bindString(2, flags);
        }
        stmt.bindLong(3, entity.getStartTime().getTime());
        stmt.bindLong(4, entity.getEndTime().getTime());
        stmt.bindLong(5, entity.getActiveTimeMs());
        stmt.bindDouble(6, entity.getActiveDistanceKm());
        stmt.bindDouble(7, entity.getMaxSpeedKmh());
        stmt.bindLong(8, entity.getMaxCadence());
        stmt.bindLong(9, entity.getMaxHeartrate());
        stmt.bindDouble(10, entity.getSumAltitude());
        stmt.bindDouble(11, entity.getSumDistanceKm());
        stmt.bindDouble(12, entity.getCalories());
        stmt.bindDouble(13, entity.getExercise());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public DbSessionLog readEntity(Cursor cursor, int offset) {
        DbSessionLog entity = new DbSessionLog( //
            cursor.getString(offset + 0), // sessionId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // flags
            new java.util.Date(cursor.getLong(offset + 2)), // startTime
            new java.util.Date(cursor.getLong(offset + 3)), // endTime
            cursor.getLong(offset + 4), // activeTimeMs
            cursor.getDouble(offset + 5), // activeDistanceKm
            cursor.getDouble(offset + 6), // maxSpeedKmh
            cursor.getInt(offset + 7), // maxCadence
            cursor.getInt(offset + 8), // maxHeartrate
            cursor.getDouble(offset + 9), // sumAltitude
            cursor.getDouble(offset + 10), // sumDistanceKm
            cursor.getDouble(offset + 11), // calories
            cursor.getDouble(offset + 12) // exercise
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbSessionLog entity, int offset) {
        entity.setSessionId(cursor.getString(offset + 0));
        entity.setFlags(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEndTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setActiveTimeMs(cursor.getLong(offset + 4));
        entity.setActiveDistanceKm(cursor.getDouble(offset + 5));
        entity.setMaxSpeedKmh(cursor.getDouble(offset + 6));
        entity.setMaxCadence(cursor.getInt(offset + 7));
        entity.setMaxHeartrate(cursor.getInt(offset + 8));
        entity.setSumAltitude(cursor.getDouble(offset + 9));
        entity.setSumDistanceKm(cursor.getDouble(offset + 10));
        entity.setCalories(cursor.getDouble(offset + 11));
        entity.setExercise(cursor.getDouble(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbSessionLog entity, long rowId) {
        return entity.getSessionId();
    }
    
    @Override
    public String getKey(DbSessionLog entity) {
        if(entity != null) {
            return entity.getSessionId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
