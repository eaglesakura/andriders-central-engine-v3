package com.eaglesakura.andriders.dao.central;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_DISPLAY_TARGET".
*/
public class DbDisplayTargetDao extends AbstractDao<DbDisplayTarget, String> {

    public static final String TABLENAME = "DB_DISPLAY_TARGET";

    /**
     * Properties of entity DbDisplayTarget.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property CreatedDate = new Property(1, java.util.Date.class, "createdDate", false, "CREATED_DATE");
        public final static Property ModifiedDate = new Property(2, java.util.Date.class, "modifiedDate", false, "MODIFIED_DATE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property LayoutType = new Property(4, int.class, "layoutType", false, "LAYOUT_TYPE");
        public final static Property TargetPackage = new Property(5, String.class, "targetPackage", false, "TARGET_PACKAGE");
    };


    public DbDisplayTargetDao(DaoConfig config) {
        super(config);
    }
    
    public DbDisplayTargetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_DISPLAY_TARGET\" (" + //
                "\"UNIQUE_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uniqueId
                "\"CREATED_DATE\" INTEGER NOT NULL ," + // 1: createdDate
                "\"MODIFIED_DATE\" INTEGER NOT NULL ," + // 2: modifiedDate
                "\"NAME\" TEXT NOT NULL ," + // 3: name
                "\"LAYOUT_TYPE\" INTEGER NOT NULL ," + // 4: layoutType
                "\"TARGET_PACKAGE\" TEXT);"); // 5: targetPackage
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_DISPLAY_TARGET_UNIQUE_ID ON DB_DISPLAY_TARGET" +
                " (\"UNIQUE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_DISPLAY_TARGET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbDisplayTarget entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindLong(2, entity.getCreatedDate().getTime());
        stmt.bindLong(3, entity.getModifiedDate().getTime());
        stmt.bindString(4, entity.getName());
        stmt.bindLong(5, entity.getLayoutType());
 
        String targetPackage = entity.getTargetPackage();
        if (targetPackage != null) {
            stmt.bindString(6, targetPackage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbDisplayTarget entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindLong(2, entity.getCreatedDate().getTime());
        stmt.bindLong(3, entity.getModifiedDate().getTime());
        stmt.bindString(4, entity.getName());
        stmt.bindLong(5, entity.getLayoutType());
 
        String targetPackage = entity.getTargetPackage();
        if (targetPackage != null) {
            stmt.bindString(6, targetPackage);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public DbDisplayTarget readEntity(Cursor cursor, int offset) {
        DbDisplayTarget entity = new DbDisplayTarget( //
            cursor.getString(offset + 0), // uniqueId
            new java.util.Date(cursor.getLong(offset + 1)), // createdDate
            new java.util.Date(cursor.getLong(offset + 2)), // modifiedDate
            cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // layoutType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // targetPackage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbDisplayTarget entity, int offset) {
        entity.setUniqueId(cursor.getString(offset + 0));
        entity.setCreatedDate(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setModifiedDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setName(cursor.getString(offset + 3));
        entity.setLayoutType(cursor.getInt(offset + 4));
        entity.setTargetPackage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbDisplayTarget entity, long rowId) {
        return entity.getUniqueId();
    }
    
    @Override
    public String getKey(DbDisplayTarget entity) {
        if(entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
