package com.eaglesakura.andriders.dao.central;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_BLE_SENSOR".
*/
public class DbBleSensorDao extends AbstractDao<DbBleSensor, String> {

    public static final String TABLENAME = "DB_BLE_SENSOR";

    /**
     * Properties of entity DbBleSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", true, "ADDRESS");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property TypeFlags = new Property(2, String.class, "typeFlags", false, "TYPE_FLAGS");
    };


    public DbBleSensorDao(DaoConfig config) {
        super(config);
    }
    
    public DbBleSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_BLE_SENSOR\" (" + //
                "\"ADDRESS\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: address
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"TYPE_FLAGS\" TEXT NOT NULL );"); // 2: typeFlags
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_BLE_SENSOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbBleSensor entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAddress());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getTypeFlags());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbBleSensor entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAddress());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getTypeFlags());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public DbBleSensor readEntity(Cursor cursor, int offset) {
        DbBleSensor entity = new DbBleSensor( //
            cursor.getString(offset + 0), // address
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2) // typeFlags
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbBleSensor entity, int offset) {
        entity.setAddress(cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setTypeFlags(cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbBleSensor entity, long rowId) {
        return entity.getAddress();
    }
    
    @Override
    public String getKey(DbBleSensor entity) {
        if(entity != null) {
            return entity.getAddress();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
