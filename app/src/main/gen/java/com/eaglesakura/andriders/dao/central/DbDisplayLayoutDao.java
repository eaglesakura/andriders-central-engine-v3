package com.eaglesakura.andriders.dao.central;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_DISPLAY_LAYOUT".
*/
public class DbDisplayLayoutDao extends AbstractDao<DbDisplayLayout, String> {

    public static final String TABLENAME = "DB_DISPLAY_LAYOUT";

    /**
     * Properties of entity DbDisplayLayout.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property UpdatedDate = new Property(1, java.util.Date.class, "updatedDate", false, "UPDATED_DATE");
        public final static Property AppPackageName = new Property(2, String.class, "appPackageName", false, "APP_PACKAGE_NAME");
        public final static Property SlotId = new Property(3, int.class, "slotId", false, "SLOT_ID");
        public final static Property PluginId = new Property(4, String.class, "pluginId", false, "PLUGIN_ID");
        public final static Property ValueId = new Property(5, String.class, "valueId", false, "VALUE_ID");
    };


    public DbDisplayLayoutDao(DaoConfig config) {
        super(config);
    }
    
    public DbDisplayLayoutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_DISPLAY_LAYOUT\" (" + //
                "\"UNIQUE_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uniqueId
                "\"UPDATED_DATE\" INTEGER NOT NULL ," + // 1: updatedDate
                "\"APP_PACKAGE_NAME\" TEXT NOT NULL ," + // 2: appPackageName
                "\"SLOT_ID\" INTEGER NOT NULL ," + // 3: slotId
                "\"PLUGIN_ID\" TEXT NOT NULL ," + // 4: pluginId
                "\"VALUE_ID\" TEXT NOT NULL );"); // 5: valueId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_DISPLAY_LAYOUT_UNIQUE_ID ON DB_DISPLAY_LAYOUT" +
                " (\"UNIQUE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_DISPLAY_LAYOUT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbDisplayLayout entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindLong(2, entity.getUpdatedDate().getTime());
        stmt.bindString(3, entity.getAppPackageName());
        stmt.bindLong(4, entity.getSlotId());
        stmt.bindString(5, entity.getPluginId());
        stmt.bindString(6, entity.getValueId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbDisplayLayout entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindLong(2, entity.getUpdatedDate().getTime());
        stmt.bindString(3, entity.getAppPackageName());
        stmt.bindLong(4, entity.getSlotId());
        stmt.bindString(5, entity.getPluginId());
        stmt.bindString(6, entity.getValueId());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public DbDisplayLayout readEntity(Cursor cursor, int offset) {
        DbDisplayLayout entity = new DbDisplayLayout( //
            cursor.getString(offset + 0), // uniqueId
            new java.util.Date(cursor.getLong(offset + 1)), // updatedDate
            cursor.getString(offset + 2), // appPackageName
            cursor.getInt(offset + 3), // slotId
            cursor.getString(offset + 4), // pluginId
            cursor.getString(offset + 5) // valueId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbDisplayLayout entity, int offset) {
        entity.setUniqueId(cursor.getString(offset + 0));
        entity.setUpdatedDate(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setAppPackageName(cursor.getString(offset + 2));
        entity.setSlotId(cursor.getInt(offset + 3));
        entity.setPluginId(cursor.getString(offset + 4));
        entity.setValueId(cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbDisplayLayout entity, long rowId) {
        return entity.getUniqueId();
    }
    
    @Override
    public String getKey(DbDisplayLayout entity) {
        if(entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
