package com.eaglesakura.andriders.dao.session;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_SESSION_POINT".
*/
public class DbSessionPointDao extends AbstractDao<DbSessionPoint, java.util.Date> {

    public static final String TABLENAME = "DB_SESSION_POINT";

    /**
     * Properties of entity DbSessionPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, java.util.Date.class, "date", true, "DATE");
        public final static Property UploadState = new Property(1, int.class, "uploadState", false, "UPLOAD_STATE");
        public final static Property CentralJson = new Property(2, String.class, "centralJson", false, "CENTRAL_JSON");
        public final static Property Extra = new Property(3, byte[].class, "extra", false, "EXTRA");
    };


    public DbSessionPointDao(DaoConfig config) {
        super(config);
    }
    
    public DbSessionPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_SESSION_POINT\" (" + //
                "\"DATE\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: date
                "\"UPLOAD_STATE\" INTEGER NOT NULL ," + // 1: uploadState
                "\"CENTRAL_JSON\" TEXT NOT NULL ," + // 2: centralJson
                "\"EXTRA\" BLOB);"); // 3: extra
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_SESSION_POINT_UPLOAD_STATE ON DB_SESSION_POINT" +
                " (\"UPLOAD_STATE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_SESSION_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbSessionPoint entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDate().getTime());
        stmt.bindLong(2, entity.getUploadState());
        stmt.bindString(3, entity.getCentralJson());
 
        byte[] extra = entity.getExtra();
        if (extra != null) {
            stmt.bindBlob(4, extra);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbSessionPoint entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDate().getTime());
        stmt.bindLong(2, entity.getUploadState());
        stmt.bindString(3, entity.getCentralJson());
 
        byte[] extra = entity.getExtra();
        if (extra != null) {
            stmt.bindBlob(4, extra);
        }
    }

    @Override
    public java.util.Date readKey(Cursor cursor, int offset) {
        return new java.util.Date(cursor.getLong(offset + 0));
    }    

    @Override
    public DbSessionPoint readEntity(Cursor cursor, int offset) {
        DbSessionPoint entity = new DbSessionPoint( //
            new java.util.Date(cursor.getLong(offset + 0)), // date
            cursor.getInt(offset + 1), // uploadState
            cursor.getString(offset + 2), // centralJson
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3) // extra
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbSessionPoint entity, int offset) {
        entity.setDate(new java.util.Date(cursor.getLong(offset + 0)));
        entity.setUploadState(cursor.getInt(offset + 1));
        entity.setCentralJson(cursor.getString(offset + 2));
        entity.setExtra(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
     }
    
    @Override
    protected final java.util.Date updateKeyAfterInsert(DbSessionPoint entity, long rowId) {
        return entity.getDate();
    }
    
    @Override
    public java.util.Date getKey(DbSessionPoint entity) {
        if(entity != null) {
            return entity.getDate();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
