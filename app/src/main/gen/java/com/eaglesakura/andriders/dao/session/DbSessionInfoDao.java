package com.eaglesakura.andriders.dao.session;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_SESSION_INFO".
*/
public class DbSessionInfoDao extends AbstractDao<DbSessionInfo, Long> {

    public static final String TABLENAME = "DB_SESSION_INFO";

    /**
     * Properties of entity DbSessionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SessionId = new Property(0, long.class, "sessionId", true, "SESSION_ID");
        public final static Property Flags = new Property(1, String.class, "flags", false, "FLAGS");
        public final static Property InfoJson = new Property(2, String.class, "infoJson", false, "INFO_JSON");
        public final static Property FitWeight = new Property(3, Float.class, "fitWeight", false, "FIT_WEIGHT");
    };


    public DbSessionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DbSessionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_SESSION_INFO\" (" + //
                "\"SESSION_ID\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: sessionId
                "\"FLAGS\" TEXT," + // 1: flags
                "\"INFO_JSON\" TEXT," + // 2: infoJson
                "\"FIT_WEIGHT\" REAL);"); // 3: fitWeight
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_SESSION_INFO_FLAGS ON DB_SESSION_INFO" +
                " (\"FLAGS\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_SESSION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbSessionInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSessionId());
 
        String flags = entity.getFlags();
        if (flags != null) {
            stmt.bindString(2, flags);
        }
 
        String infoJson = entity.getInfoJson();
        if (infoJson != null) {
            stmt.bindString(3, infoJson);
        }
 
        Float fitWeight = entity.getFitWeight();
        if (fitWeight != null) {
            stmt.bindDouble(4, fitWeight);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbSessionInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSessionId());
 
        String flags = entity.getFlags();
        if (flags != null) {
            stmt.bindString(2, flags);
        }
 
        String infoJson = entity.getInfoJson();
        if (infoJson != null) {
            stmt.bindString(3, infoJson);
        }
 
        Float fitWeight = entity.getFitWeight();
        if (fitWeight != null) {
            stmt.bindDouble(4, fitWeight);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DbSessionInfo readEntity(Cursor cursor, int offset) {
        DbSessionInfo entity = new DbSessionInfo( //
            cursor.getLong(offset + 0), // sessionId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // flags
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // infoJson
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3) // fitWeight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbSessionInfo entity, int offset) {
        entity.setSessionId(cursor.getLong(offset + 0));
        entity.setFlags(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInfoJson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFitWeight(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbSessionInfo entity, long rowId) {
        entity.setSessionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbSessionInfo entity) {
        if(entity != null) {
            return entity.getSessionId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
