// バージョン名
// ${メジャーバージョン}.${機能バージョン}.${ビルド番号}
// 3.0.x  : モジュール細分化バージョン
def ACE_APP_VERSION = "3.0"
def ACE_SDK_VERSION = "3.0.build-600"

apply plugin: 'com.android.application'
apply plugin: 'com.eaglesakura.ci-support'

/**
 * Android Studioでのビルドとそれ以外を切り分ける
 */
if (project.hasProperty("devBuild")) {
    ext.ANDROID_STUDIO = true
    ext.ANDROID_BUILD_DATE = "\"date-devBuild\""
    ext.ANDROID_BUILD_ON_CI = "${Boolean.FALSE}"
    ext.ANDROID_BUILD_NUMBER = 1
    ext.ANDROID_BUILD_NAME = "${ACE_APP_VERSION}.devBuild"
} else {
    ext.ANDROID_STUDIO = false
    ext.ANDROID_BUILD_DATE = "\"${eglibrary.ci.buildDate}\""
    ext.ANDROID_BUILD_ON_CI = "${eglibrary.ci.ciRunning}"
    ext.ANDROID_BUILD_NUMBER = eglibrary.ci.buildVersionCode as int
    ext.ANDROID_BUILD_NAME = "${ACE_APP_VERSION}${getArtifactVersionSuffix()}"
}

configurations {
    all*.exclude group: "com.google.code.findbugs", module: "jsr305"
    all*.exclude group: "org.apache.httpcomponents", module: "httpclient"
}

dependencies {
    if (ACESDK_COMPILE_LOCAL) {
        implementation(project(':sdk')) {
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
        }
    } else {
        implementation("com.eaglesakura:andriders-central-engine-sdk:${ACE_SDK_VERSION}") {
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
        }
    }

    if (!EGLIBRARY_COMPILE_JAVA_COMMONS) {
        implementation "com.eaglesakura:java-commons:2.2.1"
    } else {
        implementation project(':eglibrary:java-commons')
    }

    if (!EGLIBRARY_COMPILE_ANDROID_COMMONS) {
        implementation("com.eaglesakura:android-commons:2.3.5") {
            exclude(group: "com.eaglesakura", module: "java-commons")
        }
    } else {
        implementation(project(':eglibrary:android-commons')) {
            exclude(group: "com.eaglesakura", module: "java-commons")
        }
    }

    implementation("com.eaglesakura:garnet:1.2.2") {
        exclude(group: "com.eaglesakura", module: "java-commons")
        exclude(group: "com.eaglesakura", module: "android-commons")
    }

    implementation 'com.eaglesakura:greendao-wrapper:2.4.0'
    implementation("com.eaglesakura:sloth-framework:4.0.0") {
        exclude(group: "com.eaglesakura", module: "java-commons")
        exclude(group: "com.eaglesakura", module: "android-commons")
        exclude(group: "com.eaglesakura", module: "garnet")
    }

    if (!EGLIBRARY_COMPILE_ANDROID_BLUETOOTH) {
        implementation("com.eaglesakura:android-bluetooth:1.3.2") {
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
        }
    } else {
        implementation(project(':eglibrary:android-bluetooth')) {
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
        }
    }

    if (!EGLIBRARY_COMPILE_ANDROID_PLAYSERVICE) {
        implementation("com.eaglesakura:android-gms:2.0.2") {
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.android.firebase")
        }
        implementation("com.eaglesakura:android-firebase:2.0.1") {
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
            exclude(group: "com.google.android.gms")
            exclude(group: "com.google.android.firebase")
        }
    } else {
        implementation(project(':eglibrary:android-gms')) {
            exclude(group: "com.google.android.gms")
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
        }
        implementation(project(':eglibrary:android-firebase')) {
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
            exclude(group: "com.eaglesakura", module: "android-gms")
        }
    }

    /**
     * UnitTest
     */
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    androidTestImplementation("com.eaglesakura:android-devicetest-support:2.3.1") {
        exclude(group: "com.eaglesakura", module: "java-commons")
        exclude(group: "com.eaglesakura", module: "android-commons")
        exclude(group: "com.android.support")
    }
    testImplementation("com.eaglesakura:android-unittest-support:1.6.0") {
        exclude(group: "com.eaglesakura", module: "java-commons")
        exclude(group: "com.eaglesakura", module: "android-commons")
        exclude(group: "com.android.support")
    }
    /**
     * support libs
     */
    implementation "com.android.support:support-v4:27.0.0"
    implementation "com.android.support:appcompat-v7:27.0.0"
    implementation "com.android.support:cardview-v7:27.0.0"
    implementation "com.android.support:recyclerview-v7:27.0.0"
    implementation "com.android.support:palette-v7:27.0.0"
    implementation "com.android.support:design:27.0.0"
    implementation "com.android.support:support-vector-drawable:27.0.0"
    implementation "com.android.support:support-annotations:27.0.0"

    /**
     * Android Architecture Components
     */
    implementation "android.arch.lifecycle:runtime:1.0.3"
    implementation "android.arch.lifecycle:extensions:1.0.0-rc1"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0-rc1"

    // Room O/R Mapper
    implementation "android.arch.persistence.room:runtime:1.0.0-rc1"
    annotationProcessor "android.arch.persistence.room:compiler:1.0.0-rc1"

    /**
     * Play Service
     */
    implementation "com.google.android.gms:play-services-fitness:11.4.2"
    implementation "com.google.android.gms:play-services-location:11.4.2"
    implementation "com.google.android.gms:play-services-maps:11.4.2"
    implementation "com.google.android.gms:play-services-auth:11.4.2"

    /**
     * Firebase
     */
    implementation "com.google.firebase:firebase-core:11.4.2"
    implementation "com.google.firebase:firebase-auth:11.4.2"
    implementation "com.google.firebase:firebase-config:11.4.2"
    implementation "com.google.firebase:firebase-database:11.4.2"
    implementation "com.google.firebase:firebase-crash:11.4.2"

    // UI Library
    implementation 'com.edmodo:rangebar:1.0.0' // Zone Setting

    /**
     * Smooth ProgressBar
     * https://github.com/castorflex/SmoothProgressBar
     */
    implementation 'com.github.castorflex.smoothprogressbar:library:1.3.0'

    // Remote Debug
    debugImplementation 'com.deploygate:sdk:4.0.0'

    // SQLite JSON
    androidTestImplementation 'com.eaglesakura:android-sqliteX:1.0.build-33'
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.0'

    if (ANDROID_STUDIO) {
        aaptOptions.cruncherEnabled = false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.eaglesakura.andriders.v3"
        minSdkVersion 21
        targetSdkVersion 27
        multiDexEnabled true

        versionCode ANDROID_BUILD_NUMBER
        versionName ANDROID_BUILD_NAME
        vectorDrawables.useSupportLibrary = true        // using vector getDrawable

        // add BuildConfig
        buildConfigField "String", "BUILD_DATE", "\"${eglibrary.ci.buildDate}\""

        // 日本語と英語リソースのみを残す
        resConfigs "en", "ja"

        manifestPlaceholders = [google_api_key: "@string/google_api_key"]

        // Device Test
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"    // JUnit4
    }

    sourceSets {
        main.java.srcDirs += [
                'src/main/gen/java',
                'src/main/plugin',  // 内蔵プラグイン
        ]
        main.res.srcDirs += [
                "private/main/res"
        ]
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())   // Room generated
    }

    testOptions {
        unitTests.all {
            if (eglibrary.ci.ciRunning) {
                jvmArgs '-Xms256m', '-Xmx2048m', '-XX:MaxPermSize=128m', '-XX:+HeapDumpOnOutOfMemoryError'
            }
        }
    }

    // 署名設定
    signingConfigs {
        debug {
            storeFile DEBUG_KEYSTORE_FILE_PATH
            storePassword DEBUG_KEYSTORE_PASS
            keyAlias DEBUG_KEYSTORE_ALIAS_NAME
            keyPassword DEBUG_KEYSTORE_ALIAS_PASS
        }

        release {
            storeFile RELEASE_KEYSTORE_FILE_PATH
            storePassword RELEASE_KEYSTORE_PASS
            keyAlias RELEASE_KEYSTORE_ALIAS_NAME
            keyPassword RELEASE_KEYSTORE_ALIAS_PASS
        }
    }

    buildTypes {
        debug {
            // Pluginとの連携やデバッグを楽にするため、Package名は共通にする
            versionNameSuffix ".debug"    // バージョン名にデバッグフラグを付与する
            signingConfig signingConfigs.debug
            ext.alwaysUpdateBuildId = false
        }

        release {
            signingConfig signingConfigs.release
        }
    }

    /**
     * ビルドフレーバー種別一覧
     *
     * ide: 開発/ビルド環境
     */
    flavorDimensions "ide"

    productFlavors {
        /**
         * Android Studioでのローカルビルド設定
         */
        studio {
            dimension "ide"
            applicationId "org.andriders.ace"

            minSdkVersion 21

            /**
             * 日本語とxxxhdpiリソースのみを残す
             */
            resConfigs "ja", DEVELOER_TARGET_RESOURCE_DPI
        }

        /**
         * デプロイ / ビルドマシン用設定
         */
        terminal {
            dimension "ide"
            applicationId "org.andriders.ace"

            /**p
             * 日本語と英語リソースのみを残す
             */
            resConfigs "en", "ja"
        }
    }

    lintOptions {
        disable "DuplicateIds"
        disable "NewApi"
        disable "InvalidPackage"
        disable "ProtectedPermissions"
        disable "ResourceType"
//        abortOnError false
    }

    // ignore include
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/services/com.google.**'
        exclude "**/**annotations.gwt.xml"
        exclude "**/**-setter_store.bin"
        exclude "**/**-layoutinfo.bin"
        exclude "**/**-br.bin"
        exclude "build-data.properties"
        exclude "protobuf.meta"
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    String CIRCLE_TAG = System.env.CIRCLE_TAG

    if (CIRCLE_TAG != null) {
        // TAGがある場合それを直接利用する
        return ""
    }

    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".build-${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".snapshot"
    }
}

apply from: "generator.gradle"

/**
 * Notifications
 */
apply plugin: 'com.mindera.gradle.slack'
apply plugin: 'com.github.ben-manes.versions'

slack {
    url System.getenv("ACE_SLACK_HOOK_URL");
    dependsOnTasks 'assembleGoogleplayDebug', 'assembleGoogleplayRelease', 'testGoogleplayDebugUnitTest', 'dependencyUpdates';
    title 'ACE v3';
    enabled = eglibrary.ci.ciRunning
//    enabled = true
    gitInfo = true
}

// Apply Google Play Service Data
apply plugin: 'com.google.gms.google-services'
