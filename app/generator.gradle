buildscript {
    repositories {
        jcenter()
        maven {
            url "http://eaglesakura.github.io/maven/"
        }
    }
    dependencies {
        classpath "com.eaglesakura:plugin-android-dbgenerator:2.0.146"
    }
}

/**
 * サイクルコンピューター設定用プロファイルを出力する
 */
task generateCentralSettingDao(type: com.eaglesakura.gradle.task.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def schema = newSchema(1, "central");

    /**
     * 表示グルーピング用DAO
     */
    def DbDisplayTarget = schema.addEntity("DbDisplayTarget");
    DbDisplayTarget.addStringProperty("uniqueId").notNull().unique().index().primaryKey();
    DbDisplayTarget.addDateProperty("createdDate").notNull(); // 作成日時
    DbDisplayTarget.addDateProperty("modifiedDate").notNull();    // 更新日時
    DbDisplayTarget.addStringProperty("name").notNull();
    DbDisplayTarget.addIntProperty("layoutType").notNull(); // 後の拡張用
    DbDisplayTarget.addStringProperty("targetPackage");    // 表示対象のパッケージ名

    /**
     * 表示アイテム用
     */
    def DbDisplayLayout = schema.addEntity("DbDisplayLayout");
    DbDisplayLayout.addStringProperty("uniqueId").notNull().unique().index().primaryKey();
    DbDisplayLayout.addStringProperty("targetPackage").notNull();    // 表示対象のパッケージ名
    DbDisplayLayout.addIntProperty("slotId").notNull();    // 設定対象のスロットID
    DbDisplayLayout.addStringProperty("extensionId").notNull();    // 表示対象の拡張機能
    DbDisplayLayout.addStringProperty("valueId").notNull();   // 設定される値の識別

    /**
     * スキャンしたデバイス一覧
     */
    def DbBleFitnessDevice = schema.addEntity("DbBleFitnessDevice");
    // addressは重複しない
    DbBleFitnessDevice.addStringProperty("address").notNull().unique().primaryKey();
    // 接続数
    DbBleFitnessDevice.addIntProperty("selectedCount").notNull();
    // デバイスの種類
    DbBleFitnessDevice.addIntProperty("deviceType").notNull();

    /**
     * セットアップされたコマンド
     */
    def DbCommand = schema.addEntity("DbCommand");

    // 起動するコマンドキー
    // 一意に割り当てられる
    DbCommand.addStringProperty("commandKey").notNull().unique().primaryKey();
    DbCommand.addIntProperty("category").notNull().index();    // コマンドの管理カテゴリ
    DbCommand.addStringProperty("packageName").notNull();  // 起動対象の対応アプリpackage
    DbCommand.addByteArrayProperty("iconPng").notNull(); // アイコンファイル

    // 制御情報
    DbCommand.addStringProperty("extraJson");  // コマンドの付与情報（タイマー間隔、スピード等のメタ情報

    // Intentで直接起動するオプション
    DbCommand.addStringProperty("intentJson");  // Intent情報

    /**
     * プラグイン情報
     */
    def DbActivePlugin = schema.addEntity("DbActivePlugin");

    DbActivePlugin.addStringProperty("uniqueId").notNull().unique().primaryKey();
    DbActivePlugin.addStringProperty("category").notNull().index();  // プラグインのカテゴリ
    DbActivePlugin.addStringProperty("packageName").notNull().index();  // プラグインのapp package name
    DbActivePlugin.addStringProperty("className").notNull().index();    // プラグインのfull class name
}

/**
 * セッション情報は書き出しが多いので別なSchemaにしておく
 */
task generateCentralLogDao(type: com.eaglesakura.gradle.task.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def sessionSchema = newSchema(1, "session");

    /**
     * セッションごとの情報を設定する
     */
    def DbSessionInfo = sessionSchema.addEntity("DbSessionInfo");
    DbSessionInfo.addLongProperty("sessionId").notNull().unique().primaryKey(); // 開始時間がそのままキーになる
    DbSessionInfo.addStringProperty("flags").index();        // セッション状況フラグ
    DbSessionInfo.addStringProperty("infoJson");                // セッション元情報
    DbSessionInfo.addFloatProperty("fitWeight");             // ユーザーの体重, 統計用のため別Column

    /**
     * セッショングループは日単位で設定する。
     * 日をまたいだ場合は、前日のセッションの継続とする
     * Ace起動 -> 終了までを1セッショングループとして扱う
     *
     * セッションとは、ACEs起動〜ACEs終了までの間である。
     */
    def DbSessionPoint = sessionSchema.addEntity("DbSessionPoint");
    DbSessionPoint.addDateProperty("date").notNull().unique().primaryKey();  // 打刻時間は常にUniqueになるはず
    DbSessionPoint.addLongProperty("sessionId").notNull().index();              // 所属するセッションID内
    DbSessionPoint.addStringProperty("centralJson").notNull();               // CentralをJSON化したデータ

    // 統計用の値
    DbSessionPoint.addStringProperty("valueFlags").notNull().index();       // 統計用フラグ
    DbSessionPoint.addIntProperty("valueHeartrate").index();        // 心拍(Max, Avgを取る)
    DbSessionPoint.addIntProperty("valueCadence").index();          // ケイデンス(Maxを取る)
    DbSessionPoint.addFloatProperty("valueSensorSpeed").index();    // センサー由来の速度(Max, Avgを取る)
    DbSessionPoint.addFloatProperty("valueGpsSpeed").index();       // GPS由来の速度(Max, Avgを取る)
    // 以下はセッションの最終値を取れば良いため、インデックスを貼る必要はない
    DbSessionPoint.addFloatProperty("valueFitCalories");       // セッション消費カロリー
    DbSessionPoint.addFloatProperty("valueFitExercise");       // セッション獲得エクササイズ
    DbSessionPoint.addFloatProperty("valueRecordDistanceKm");       // セッション合計移動距離
    DbSessionPoint.addFloatProperty("valueRecordSumAltMeter");       // セッション合計獲得標高
    DbSessionPoint.addFloatProperty("valueActiveDistanceKm");       // セッション自走距離
    DbSessionPoint.addIntProperty("valueActiveTimeMs");       // セッション自走時間
    // 将来的な機能予約
    DbSessionPoint.addStringProperty("valueGeohash10").index();       // 高精度ジオハッシュ
    DbSessionPoint.addStringProperty("valueGeohash7Peripherals").index();       // 100m単位の隣接情報
    DbSessionPoint.addIntProperty("valueIntervalIndex").notNull().index();       // セッション内のインターバル番号
}
