buildscript {
    repositories {
        jcenter()
        maven {
            url "http://eaglesakura.github.io/maven/"
        }
    }
    dependencies {
        classpath "com.eaglesakura:eglibrary-gradle-plugin:0.2.7"
    }
}

apply plugin: 'com.eaglesakura.android-support'

/**
 * 設定クラスを生成する
 */
task generateProps(type: com.eaglesakura.gradle.tasks.AndroidPropsGenTask) {
    outDirectory file('src/main/generated/props')

    /**
     * アップデート管理
     */
    def UpdateCheckProps = newProps("${android.defaultConfig.applicationId}.db.UpdateCheckProps");
    UpdateCheckProps.intProperty "initializeReleased", 0

    /**
     * CentralServiceの設定
     */
    def CentralServiceSettings = newProps("${android.defaultConfig.applicationId}.db.CentralServiceSettings")
    // WiFiの強制Offを行う
    CentralServiceSettings.booleanProperty "wifiDisable", true  // Service起動時に強制的にWiFiを切る

    // CPUをスリープさせない
    CentralServiceSettings.booleanProperty "cpuNoSleep", true  // CPUを寝かさない

    // 互換性を優先する
    // SDKから送信する情報に互換性を持たせる場合はtrue
    CentralServiceSettings.booleanProperty "enableOldSdkCompat", false

    // 撮影ファイルを1時間単位でフォルダ分け
    // 大量に写真を撮影する場合、1時間単位で画像を分けるようにする
    CentralServiceSettings.booleanProperty "mediaDirectory1h", false

    // 近接コマンド
    CentralServiceSettings.booleanProperty "proximityCommandEnable", true
    // 近接コマンドでスクリーンON／OFF時に同期する
    CentralServiceSettings.booleanProperty "proximityCommandScreenLink", true

    // アクティビティコマンド
//    CentralServiceSettings.booleanProperty "activityCommandEnable", true // 近接コマンドON/OFF
    // タイマーコマンド
    CentralServiceSettings.booleanProperty "timerCommandEnable", true // タイマーコマンドON/OFF
    CentralServiceSettings.booleanProperty "speedCommandEnable", true // 速度コマンドON/OFF
    CentralServiceSettings.booleanProperty "distanceCommandEnable", true //距離コマンドON/OFF

    // 位置情報
    CentralServiceSettings.booleanProperty "gpsEnable", true // GPS座標による更新を行う場合
    CentralServiceSettings.floatProperty "gpsAccuracy", 50 // 信頼できるGPS精度（メートル）

    // サウンド情報
    CentralServiceSettings.booleanProperty "soundEnable", true // Serviceからサウンドを鳴らす場合はtrue
    CentralServiceSettings.booleanProperty "customSoundEnable", true // カスタマイズされたサウンドを鳴らす場合はtrue

    /**
     * デフォルトコマンドの各種設定
     */
    def DefaultCommandSettings = newProps("${android.defaultConfig.applicationId}.db.DefaultCommandSettings");
    DefaultCommandSettings.intProperty "videoMaxRecordTimeMs", (1000 * 60 * 10); // デフォルトの最大録画時間

    /**
     * プロファイル設定
     */
    def UserProfiles = newProps("${android.defaultConfig.applicationId}.db.UserProfiles");
    UserProfiles.doubleProperty "userWeight", 65  // ユーザーの体重
    UserProfiles.intProperty "normalHeartrate", 70 // 通常心拍
    UserProfiles.intProperty "maxHeartrate", 190 // 最大心拍
    UserProfiles.intProperty "wheelOuterLength", 2096 // 最大心拍
    UserProfiles.intProperty "speedZoneCruise", 25 // これより早いと巡航
    UserProfiles.intProperty "speedZoneSprint", 35 // これより早いとスプリント
    UserProfiles.intProperty "cadenceZoneIdeal", 80 // これより早いと標準ケイデンス
    UserProfiles.intProperty "cadenceZoneHigh", 100 // これより早いと高ケイデンス
    UserProfiles.booleanProperty "gpsEnable", true // GPS有効状態
    UserProfiles.stringProperty "bleHeartrateMonitorAddress", ""; // 心拍計
    UserProfiles.stringProperty "bleSpeedCadenceSensorAddress", "";   // スピード＆ケイデンス
    UserProfiles.stringProperty "btRemoteCentralAddress", ""; // リモートセントラル

    // サイクルコンピューター
    UserProfiles.booleanProperty "cycleComputerInterfaceEnable", true

    /**
     * Twitter設定用
     */
    def TwitterConnectSettings = newProps("${android.defaultConfig.applicationId}.db.TwitterConnectSettings");
    TwitterConnectSettings.stringProperty "fullName", "";
    TwitterConnectSettings.stringProperty "id", "";
    TwitterConnectSettings.stringProperty "token", "";
    TwitterConnectSettings.stringProperty "tokenSecret", "";
    TwitterConnectSettings.stringProperty "smallIconUrl", "";
    TwitterConnectSettings.stringProperty "largeIconUrl", "";
    TwitterConnectSettings.bitmapProperty "icon"

    /**
     * デバッグ設定用
     */
    def DebugSettings = newProps("${android.defaultConfig.applicationId}.db.DebugSettings");
    DebugSettings.booleanProperty "debugEnable", false // デバッグをONにする場合はtrue
    DebugSettings.booleanProperty "acesRenderDebugInfo", false // ACEsでデバッグ情報をレンダリングする場合true
    DebugSettings.booleanProperty "renderLocation", false // ACEsで位置情報レンダリングを行う場合true
}

/**
 * Protocol Buffersファイルをビルドする
 */
task compileProtobuf(type: com.eaglesakura.gradle.tasks.ProtobufCompileTask) {
    src = file("src/main/protobuf")
    javaOutput = file("src/main/generated/protobuf")
}

/**
 * ロードバイク設定用プロファイルを出力する
 */
task generateUserProfileDao(type: com.eaglesakura.gradle.tasks.AndroidDaoGenTask) {
    outDirectory = file("src/main/generated/dao")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def profileSchema = newSchema(0x01, "profile");

    /**
     * 切り替え可能なプロファイル情報
     */
    def DbUserProfile = profileSchema.addEntity("DbUserProfile");

    DbUserProfile.addStringProperty("uniqueId").notNull().unique().index().primaryKey();
    DbUserProfile.addDateProperty("createdDate").notNull(); // 作成日時
    DbUserProfile.addDateProperty("modifiedDate").notNull();    // 更新日時
    DbUserProfile.addStringProperty("name").notNull();
    DbUserProfile.addStringProperty("description").notNull();

    // ロードバイク本体設定
    DbUserProfile.addStringProperty("roadbikeName").notNull(); // ロードバイク名
    DbUserProfile.addIntProperty("wheelOuterLength").notNull(); // 使用しているホイールの外周サイズ
    DbUserProfile.addIntProperty("frameMaterial").notNull();  // フレームの材質 （チタン、カーボン、アルミ、クロモリ、その他）
    DbUserProfile.addIntProperty("roadbikeWeight");  // ロードバイクの重量（未設定あり）
    DbUserProfile.addByteArrayProperty("gearSetting");  // ギア比の設定（未設定あり）

    // スピードゾーン
    DbUserProfile.addIntProperty("speedZoneCruise").notNull();  // これよりも早いと巡航域
    DbUserProfile.addIntProperty("speedZoneSprint").notNull();  // これよりも早いとスプリント領域

    // 個人設定
    DbUserProfile.addIntProperty("cadenceZoneIdeal").notNull(); // これよりも速いと理想ケイデンス
    DbUserProfile.addIntProperty("cadenceZoneHigh").notNull(); // これよりも速いと高ケイデンス

    // 周辺機器
    // スピードセンサー設定と切替
    DbUserProfile.addBooleanProperty("gpsSpeedSensorEnable").notNull();
    DbUserProfile.addBooleanProperty("gpsDistanceSensorEnable").notNull();
    DbUserProfile.addBooleanProperty("bleSpeedSensorEnable").notNull();
    // BLE HRモニター
    DbUserProfile.addBooleanProperty("bleHeartrateMonitorEnable").notNull();
    // BLE ケイデンスセンサー
    DbUserProfile.addBooleanProperty("bleCadenceSensorEnable").notNull();
    // リモートセントラル
    DbUserProfile.addBooleanProperty("btRemoteCentralEnable").notNull();
}

/**
 * サイクルコンピューター設定用プロファイルを出力する
 */
task generateDisplayDao(type: com.eaglesakura.gradle.tasks.AndroidDaoGenTask) {
    outDirectory = file("src/main/generated/dao")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def profileSchema = newSchema(1, "display");

    /**
     * 表示グルーピング用DAO
     */
    def DbDisplayTarget = profileSchema.addEntity("DbDisplayTarget");
    DbDisplayTarget.addStringProperty("uniqueId").notNull().unique().index().primaryKey();
    DbDisplayTarget.addDateProperty("createdDate").notNull(); // 作成日時
    DbDisplayTarget.addDateProperty("modifiedDate").notNull();    // 更新日時
    DbDisplayTarget.addStringProperty("name").notNull();
    DbDisplayTarget.addIntProperty("layoutType").notNull(); // 後の拡張用
    DbDisplayTarget.addStringProperty("targetPackage");    // 表示対象のパッケージ名

    /**
     * 表示アイテム用
     */
    def DbDisplayLayout = profileSchema.addEntity("DbDisplayLayout");
    DbDisplayLayout.addStringProperty("uniqueId").notNull().unique().index().primaryKey();
    DbDisplayLayout.addStringProperty("targetPackage").notNull();    // 表示対象のパッケージ名
    DbDisplayLayout.addIntProperty("slotId").notNull();    // 設定対象のスロットID
    DbDisplayLayout.addStringProperty("extensionId").notNull();    // 表示対象の拡張機能
    DbDisplayLayout.addStringProperty("valueId").notNull();   // 設定される値の識別
}

/**
 * 各種設定用DAOを出力
 */
task generateSettingsDao(type: com.eaglesakura.gradle.tasks.AndroidDaoGenTask) {
    outDirectory = file("src/main/generated/dao")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def sessionSchema = newSchema(0x01, "settings");
    def DbZoneSettings = sessionSchema.addEntity("DbZoneSettings");

    DbZoneSettings.addStringProperty("appExtraKey").notNull().unique().primaryKey(); // 識別ID
    DbZoneSettings.addStringProperty("name").notNull();   // 設定名

    // 速度域
    DbZoneSettings.addDoubleProperty("speedCruise").notNull();   // 巡航
    DbZoneSettings.addDoubleProperty("speedSprint").notNull();   // スプリント
}

task generateCycleLogDao(type: com.eaglesakura.gradle.tasks.AndroidDaoGenTask) {
    outDirectory = file("src/main/generated/dao")
    classPackageBase = "com.eaglesakura.andriders.dao"

    /**
     * グループと日毎ログで共通に使用するプロパティを与える
     */
    def addLogProperty = {
        // 時間関連
        it.addDateProperty("startTime").notNull();  // その日最初のセッション開始時刻
        it.addDateProperty("endTime").notNull();  // その日最後のセッション終了時刻
        it.addLongProperty("activeTimeMs").notNull().index(); // セッションがアクティブ（走行）中だった時間

        // 最高記録
        it.addDoubleProperty("maxSpeedKmh").notNull().index(); // 最高速
        it.addIntProperty("maxCadence").notNull();   // この日の最高ケイデンス
        it.addIntProperty("maxHeartrate").notNull();   // この日の最高心拍

        // 延べ記録
        it.addDoubleProperty("sumDistanceKm").notNull().index();   // 移動距離合計（キロ単位）

        // 延べ消費Calorie
        // added ver 2
        it.addDoubleProperty("calories");
        // 延べエクササイズ
        // added ver 3
        it.addDoubleProperty("exercise");

        // 獲得標高
        // added ver 4
        it.addDoubleProperty("sumAltitude");
        // 検索性を必要としない拡張データ
        // added ver 4
        it.addByteArrayProperty("extraPayload");
    }

    def sessionSchema = newSchema(4, "session");

    /**
     * 日毎のログ
     */
    def DbCycleDateLog = sessionSchema.addEntity("DbCycleDateLog");
    // yyyyMMddをキーとして保存する
    DbCycleDateLog.addStringProperty("uniqueId").notNull().index().primaryKey();
    DbCycleDateLog.addIntProperty("sessionCount").notNull();    // 記録されているセッションの個数
    addLogProperty(DbCycleDateLog);

    /**
     * セッションごとの情報を設定する
     */
    def DbSessionLog = sessionSchema.addEntity("DbSessionLog");
    DbSessionLog.addStringProperty("sessionId").notNull().unique().primaryKey(); // 打刻時間
    DbSessionLog.addStringProperty("profileId").notNull(); // 走行時に使用したプロファイル
    // Google Fitにアップロード済みであればtrue
    DbSessionLog.addBooleanProperty("googleFitUploaded").notNull();
    addLogProperty(DbSessionLog);   // 共通プロパティを追加

    /**
     * セッショングループは日単位で設定する。
     * 日をまたいだ場合は、前日のセッションの継続とする
     * Ace起動 -> 終了までを1セッショングループとして扱う
     *
     * セッションとは、ACEs起動〜ACEs終了までの間である。
     */
    def DbSessionPoint = sessionSchema.addEntity("DbSessionPoint");
    // unique idはSystem.currentTimeで確定する
    DbSessionPoint.addDateProperty("date").notNull().unique().primaryKey(); //
    DbSessionPoint.addStringProperty("sessionId").notNull().index();    // 関連付けるセッション情報
    DbSessionPoint.addByteArrayProperty("raw").notNull();   // payloadの生情報
}

/**
 * Bluetoothデバイス保存用DAOを出力
 */
task generateBluetoothDeviceDao(type: com.eaglesakura.gradle.tasks.AndroidDaoGenTask) {
    outDirectory = file("src/main/generated/dao")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def bledeviceScheme = newSchema(0x01, "bledevice");

    /**
     * スキャンしたデバイス一覧
     */
    def DbBleFitnessDevice = bledeviceScheme.addEntity("DbBleFitnessDevice");
    // addressは重複しない
    DbBleFitnessDevice.addStringProperty("address").notNull().unique().primaryKey();
    // 別名
    DbBleFitnessDevice.addStringProperty("name").notNull();
    // 元の名前
    DbBleFitnessDevice.addStringProperty("nameOrigin").notNull();
    // 接続数
    DbBleFitnessDevice.addIntProperty("selectedCount").notNull();
    // 初検出日時
    DbBleFitnessDevice.addDateProperty("firstFoundDate").notNull().index();
    // デバイスの種類
    DbBleFitnessDevice.addIntProperty("deviceType").notNull();
}

/**
 * 各種コマンド内容を保存するためのDAOを出力
 */
task generateCommandControllDao(type: com.eaglesakura.gradle.tasks.AndroidDaoGenTask) {
    outDirectory = file("src/main/generated/dao")
    classPackageBase = "${android.defaultConfig.applicationId}.dao.command"

    def controllerSchema = newSchema(6, "controller");
    def DbCommandController = controllerSchema.addEntity("DbAcesCommand");

    DbCommandController.addStringProperty("commandKey").notNull().unique().primaryKey();
    // 起動するコマンドキー
    DbCommandController.addStringProperty("packageName").notNull();  // 起動対象の対応アプリpackage
    DbCommandController.addByteArrayProperty("iconPng").notNull(); // アイコンファイル
    DbCommandController.addStringProperty("appExtraKey").notNull();  // アプリ側が指定する拡張キー

    // Intentで直接起動するオプション
    DbCommandController.addByteArrayProperty("intentData");  // Intent情報 version 4

    // タイマーコマンド用のオプション
    DbCommandController.addDoubleProperty("timerIntervalMin"); // タイマーの送信間隔
    DbCommandController.addBooleanProperty("timerSyncRealTime"); // タイマーの現実時間同期 version 3

    // 距離コマンド用のオプション
    DbCommandController.addDoubleProperty("distanceIntervalKm"); // 距離の通知間隔 version 3
    DbCommandController.addIntProperty("distanceIntervalType");// 距離の通知タイプ（セッション、日） version 2
    DbCommandController.addIntProperty("distanceCommandLoopNum");// ループ回数 version 6

    // スピードコマンド用のオプション
    DbCommandController.addIntProperty("speedType");// スピードの種類（上回ったら、下回ったら、最高速開始、最高速終了） version 5
    DbCommandController.addDoubleProperty("speedKmh"); // 速度のしきい値 version 5
}

/**
 * デフォルトで用意するコマンドのDaoを出力
 */
task generateAceDefaultCommandDao(type: com.eaglesakura.gradle.tasks.AndroidDaoGenTask) {
    outDirectory = file("src/main/generated/dao")
    classPackageBase = "${android.defaultConfig.applicationId}.dao.command"
    def acesdefScheme = newSchema(2, "acesdef");

    /**
     * 指定アプリの起動を行う
     * Intentに統合したため廃止
     */
    def DbLaunchAppCommand = acesdefScheme.addEntity("DbLaunchAppCommand");
    DbLaunchAppCommand.addStringProperty("commandKey").notNull().unique().primaryKey();
    // 起動するコマンドキー
    DbLaunchAppCommand.addStringProperty("label").notNull();  // app name
    DbLaunchAppCommand.addStringProperty("packageName").notNull();  // app package
    DbLaunchAppCommand.addStringProperty("activityName").notNull(); // app activity

    /**
     * 通知を行う
     */
    def DbNotificationCommand = acesdefScheme.addEntity("DbNotificationCommand");
    DbNotificationCommand.addStringProperty("commandKey").notNull().unique().primaryKey();
    // 起動するコマンドキー
    DbNotificationCommand.addStringProperty("message"); // メッセージを表示する場合
    DbNotificationCommand.addStringProperty("sound"); // サウンドを再生する場合

    /**
     * カメラで撮影を行う
     */
    def DbCamshotCommand = acesdefScheme.addEntity("DbCamshotCommand");

    DbCamshotCommand.addStringProperty("commandKey").notNull().unique().primaryKey(); // 起動するコマンドキー
    DbCamshotCommand.addIntProperty("cameraNumber").notNull(); // 使用するカメラ MAIN/SUB
    DbCamshotCommand.addStringProperty("flash").notNull(); // 使用するフラッシュ
    DbCamshotCommand.addIntProperty("rotate").notNull(); // 撮影した映像の回転設定
    DbCamshotCommand.addStringProperty("pictureSizeId").notNull(); // 撮影サイズのID
    DbCamshotCommand.addStringProperty("scene"); // シーン設定
    DbCamshotCommand.addBooleanProperty("soundNotification").notNull(); // サウンド通知の有無
    DbCamshotCommand.addByteArrayProperty("tweet"); // ツイート設定Property
    // version 2
    DbCamshotCommand.addIntProperty("recordType");  // 保存タイプ Picture | Video
    DbCamshotCommand.addIntProperty("videoBitrateBps"); // ビデオのビットレート
    DbCamshotCommand.addIntProperty("videoFramerate"); // ビデオのフレームレート
    DbCamshotCommand.addIntProperty("videoRecordSec"); // ビデオの録画秒数

    /**
     * Twitterのツイート情報を設定する
     */
    def DbTweetCommand = acesdefScheme.addEntity("DbTweetCommand");
    DbTweetCommand.addStringProperty("commandKey").notNull().unique().primaryKey(); // 起動するコマンドキー
    DbTweetCommand.addByteArrayProperty("tweet").notNull(); // ツイート設定Property

    /**
     * Action Cameraの設定
     */
    def DbActioncamCommand = acesdefScheme.addEntity("DbActioncamCommand");
    DbActioncamCommand.addStringProperty("commandKey").notNull().unique().primaryKey();
    // 起動するコマンドキー
    DbActioncamCommand.addByteArrayProperty("tweet"); // ツイート設定Property
}

/**
 * サウンド情報を保存するためのDAOを出力
 */
task generateSoundDao(type: com.eaglesakura.gradle.tasks.AndroidDaoGenTask) {
    outDirectory = file("src/main/generated/dao")
    classPackageBase = "${android.defaultConfig.applicationId}.dao"

    def soundSchema = newSchema(0x01, "sound");
    def DbSoundData = soundSchema.addEntity("DbSoundData");

    /**
     * サウンドデータ
     */
    // サウンドに一意に割り当てられたID
    DbSoundData.addStringProperty("uniqueId").notNull().unique().primaryKey();
    // 再生するサウンドファイル実体へのpath
    DbSoundData.addStringProperty("path").notNull();
    // 有効・無効
    // デフォルトは有効
    DbSoundData.addBooleanProperty("enabled").notNull();
    // 画面表示名
    // 将来的な拡張として、後から自由な拡張インストールが可能なようにする
    DbSoundData.addStringProperty("screenName");
}