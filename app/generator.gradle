buildscript {
    repositories {
        jcenter()
        maven {
            url "http://eaglesakura.github.io/maven/"
        }
    }
    dependencies {
        classpath "com.eaglesakura:plugin-android-dbgenerator:2.0.146"
    }
}

/**
 * サイクルコンピューター設定用プロファイルを出力する
 */
task generateDisplayDao(type: com.eaglesakura.gradle.task.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def profileSchema = newSchema(1, "display");

    /**
     * 表示グルーピング用DAO
     */
    def DbDisplayTarget = profileSchema.addEntity("DbDisplayTarget");
    DbDisplayTarget.addStringProperty("uniqueId").notNull().unique().index().primaryKey();
    DbDisplayTarget.addDateProperty("createdDate").notNull(); // 作成日時
    DbDisplayTarget.addDateProperty("modifiedDate").notNull();    // 更新日時
    DbDisplayTarget.addStringProperty("name").notNull();
    DbDisplayTarget.addIntProperty("layoutType").notNull(); // 後の拡張用
    DbDisplayTarget.addStringProperty("targetPackage");    // 表示対象のパッケージ名

    /**
     * 表示アイテム用
     */
    def DbDisplayLayout = profileSchema.addEntity("DbDisplayLayout");
    DbDisplayLayout.addStringProperty("uniqueId").notNull().unique().index().primaryKey();
    DbDisplayLayout.addStringProperty("targetPackage").notNull();    // 表示対象のパッケージ名
    DbDisplayLayout.addIntProperty("slotId").notNull();    // 設定対象のスロットID
    DbDisplayLayout.addStringProperty("extensionId").notNull();    // 表示対象の拡張機能
    DbDisplayLayout.addStringProperty("valueId").notNull();   // 設定される値の識別
}

task generateCycleLogDao(type: com.eaglesakura.gradle.task.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def sessionSchema = newSchema(1, "session");

    /**
     * セッションごとの情報を設定する
     */
    def DbSessionLog = sessionSchema.addEntity("DbSessionLog");
    DbSessionLog.addStringProperty("sessionId").notNull().unique().primaryKey(); // 打刻時間
    DbSessionLog.addDateProperty("startTime").notNull();  // その日最初のセッション開始時刻
    DbSessionLog.addDateProperty("endTime").notNull();  // その日最後のセッション終了時刻
    DbSessionLog.addLongProperty("activeTimeMs").notNull(); // セッションがアクティブ（走行）中だった時間
    DbSessionLog.addDoubleProperty("activeDistanceKm").notNull(); // アクティブ走行した距離

    // 最高記録
    DbSessionLog.addDoubleProperty("maxSpeedKmh").notNull().index(); // 最高速
    DbSessionLog.addIntProperty("maxCadence").notNull();   // 最高ケイデンス
    DbSessionLog.addIntProperty("maxHeartrate").notNull();   // 最高心拍
    DbSessionLog.addDoubleProperty("sumAltitude").notNull();

    // 延べ記録
    DbSessionLog.addDoubleProperty("sumDistanceKm").notNull().index();   // 移動距離合計（キロ単位）

    // 延べ消費Calorie
    DbSessionLog.addDoubleProperty("calories").notNull();
    // 延べエクササイズ
    DbSessionLog.addDoubleProperty("exercise").notNull();

    /**
     * セッショングループは日単位で設定する。
     * 日をまたいだ場合は、前日のセッションの継続とする
     * Ace起動 -> 終了までを1セッショングループとして扱う
     *
     * セッションとは、ACEs起動〜ACEs終了までの間である。
     */
    def DbSessionPoint = sessionSchema.addEntity("DbSessionPoint");
    DbSessionPoint.addDateProperty("date").notNull().unique().primaryKey(); // 打刻時間は常にUniqueになるはず
    DbSessionPoint.addIntProperty("uploadState").notNull().index();     // サーバー同期フラグ
    DbSessionPoint.addByteArrayProperty("central").notNull();           // Centralの生バッファ
    DbSessionPoint.addByteArrayProperty("extra").notNull();             // その他メタ情報用のバッファ
}

/**
 * Bluetoothデバイス保存用DAOを出力
 */
task generateBluetoothDeviceDao(type: com.eaglesakura.gradle.task.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def bledeviceScheme = newSchema(0x01, "bledevice");

    /**
     * スキャンしたデバイス一覧
     */
    def DbBleFitnessDevice = bledeviceScheme.addEntity("DbBleFitnessDevice");
    // addressは重複しない
    DbBleFitnessDevice.addStringProperty("address").notNull().unique().primaryKey();
    // 別名
    DbBleFitnessDevice.addStringProperty("name").notNull();
    // 元の名前
    DbBleFitnessDevice.addStringProperty("nameOrigin").notNull();
    // 接続数
    DbBleFitnessDevice.addIntProperty("selectedCount").notNull();
    // 初検出日時
    DbBleFitnessDevice.addDateProperty("firstFoundDate").notNull().index();
    // デバイスの種類
    DbBleFitnessDevice.addIntProperty("deviceType").notNull();
}

/**
 * 各種コマンド内容を保存するためのDAOを出力
 */
task generateCommandDao(type: com.eaglesakura.gradle.task.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def schema = newSchema(1, "command");
    def DbCommand = schema.addEntity("DbCommand");

    // 起動するコマンドキー
    // 一意に割り当てられる
    DbCommand.addStringProperty("commandKey").notNull().unique().primaryKey();
    DbCommand.addIntProperty("category").notNull().index();    // コマンドの管理カテゴリ
    DbCommand.addStringProperty("packageName").notNull();  // 起動対象の対応アプリpackage
    DbCommand.addByteArrayProperty("iconPng").notNull(); // アイコンファイル

    // 制御情報
    DbCommand.addByteArrayProperty("commandData");  // コマンドの付与情報（タイマー間隔、スピード等のメタ情報

    // Intentで直接起動するオプション
    DbCommand.addByteArrayProperty("intentData");  // Intent情報
}

/**
 * 各種コマンド内容を保存するためのDAOを出力
 */
task generatePluginDao(type: com.eaglesakura.gradle.task.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def schema = newSchema(1, "plugin");
    def DbActivePlugin = schema.addEntity("DbActivePlugin");

    DbActivePlugin.addStringProperty("uniqueId").notNull().unique().primaryKey();
    DbActivePlugin.addStringProperty("category").notNull().index();  // プラグインのカテゴリ
    DbActivePlugin.addStringProperty("packageName").notNull().index();  // プラグインのapp package name
    DbActivePlugin.addStringProperty("className").notNull().index();    // プラグインのfull class name
}