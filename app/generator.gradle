buildscript {
    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/eaglesakura/maven/" }
    }
    dependencies {
        classpath "com.eaglesakura:sloth-plugin:1.0.13"
    }
}

apply plugin: 'com.eaglesakura.android-mipmap' /* Generate Android Mipmap */
apply plugin: 'com.eaglesakura.sloth.prop' /* Generate App Properties */

/**
 * アプリのプロパティ管理
 */
props {
    output file("src/main/gen/java")
    configOutput file("src/main/res/raw")
    property file("config/app_properties.json"), "com.eaglesakura.andriders.gen.prop"
    property file("config/central_properties.json"), "com.eaglesakura.andriders.gen.prop"
}

/**
 * mipmap生成管理
 */
mipmap {
    sources = file("image/");
    output = file("src/main/res");
    toolsPath.identify = System.getenv("IMGMAGICK_IDENTIFY");
    toolsPath.convert = System.getenv("IMGMAGICK_CONVERT");
    cleanOldFiles = false;
}

/**
 * Firebaseで管理されるConfigを生成する
 */
task generateFirebaseConfig(type: com.eaglesakura.sloth.firebase.FirebaseRemoteConfigGenTask) {
    outDirectory = file("src/main/gen/java")
    def AppStatusConfig = newConfig("${android.defaultConfig.applicationId}.gen.config.AppStatusConfig");
    AppStatusConfig.stringConfig("database_path_config", "nil");      // Databaseのコンフィグリンク
}

/**
 * サイクルコンピューター設定用プロファイルを出力する
 */
task generateCentralSettingDao(type: com.eaglesakura.sloth.dao.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def schema = newSchema(1, "central");

    /**
     * 表示スロットと表示内容(対象プラグイン、表示ID)を紐付ける
     *
     * packageName + slotIdで一意に識別される
     */
    def DbDisplayLayout = schema.addEntity("DbDisplayLayout");
    DbDisplayLayout.addStringProperty("uniqueId").notNull().unique().index().primaryKey();
    DbDisplayLayout.addDateProperty("updatedDate").notNull();    // 更新日時
    DbDisplayLayout.addStringProperty("appPackageName").notNull();    // 表示対象のアプリパッケージ名
    DbDisplayLayout.addIntProperty("slotId").notNull();    // 設定対象のスロットID
    DbDisplayLayout.addStringProperty("pluginId");    // 表示対象のプラグインID,
    DbDisplayLayout.addStringProperty("valueId");   // 設定される値の識別

    /**
     * スキャンしたデバイスキャッシュ一覧
     */
    def DbBleSensor = schema.addEntity("DbBleSensor");
    DbBleSensor.addStringProperty("address").notNull().unique().primaryKey();
    DbBleSensor.addStringProperty("name").notNull();
    DbBleSensor.addStringProperty("typeFlags").notNull();

    /**
     * セットアップされたコマンド
     */
    def DbCommand = schema.addEntity("DbCommand");

    // 起動するコマンドキー
    // 一意に割り当てられる
    DbCommand.addStringProperty("commandKey").notNull().unique().primaryKey();
    DbCommand.addIntProperty("category").notNull().index();    // コマンドの管理カテゴリ
    DbCommand.addStringProperty("packageName").notNull();  // 起動対象の対応アプリpackage
    DbCommand.addByteArrayProperty("iconPng").notNull(); // アイコンファイル
    DbCommand.addStringProperty("extraJson");  // コマンドの付与情報（タイマー間隔、スピード等のメタ情報
    // Intentで直接起動するオプション
    DbCommand.addStringProperty("intentJson");  // Intent情報

    /**
     * プラグイン情報
     */
    def DbActivePlugin = schema.addEntity("DbActivePlugin");

    DbActivePlugin.addStringProperty("uniqueId").notNull().unique().primaryKey();
    DbActivePlugin.addStringProperty("category").notNull().index();  // プラグインのカテゴリ
    DbActivePlugin.addStringProperty("packageName").notNull().index();  // プラグインのapp package name
    DbActivePlugin.addStringProperty("className").notNull().index();    // プラグインのfull class name
}

/**
 * セッション情報は書き出しが多いので別なSchemaにしておく
 */
task generateCentralLogDao(type: com.eaglesakura.sloth.dao.AndroidDaoGenTask) {
    outDirectory = file("src/main/gen/java")
    classPackageBase = "com.eaglesakura.andriders.dao"

    def sessionSchema = newSchema(1, "session");

//    /**
//     * セッションごとの情報を設定する
//     */
//    def DbSessionInfo = sessionSchema.addEntity("DbSessionInfo");
//    DbSessionInfo.addLongProperty("sessionId").notNull().unique().primaryKey(); // 開始時間がそのままキーになる
//    DbSessionInfo.addStringProperty("flags").index();        // セッション状況フラグ
//    DbSessionInfo.addStringProperty("infoJson");                // セッション元情報
//    DbSessionInfo.addFloatProperty("fitWeight");             // ユーザーの体重, 統計用のため別Column

    /**
     * セッショングループは日単位で設定する。
     * 日をまたいだ場合は、前日のセッションの継続とする
     * Ace起動 -> 終了までを1セッショングループとして扱う
     *
     * セッションとは、ACEs起動〜ACEs終了までの間である。
     */
    def DbSessionPoint = sessionSchema.addEntity("DbSessionPoint");
    DbSessionPoint.addDateProperty("date").notNull().unique().primaryKey();  // 打刻時間は常にUniqueになるはず
    DbSessionPoint.addLongProperty("sessionId").notNull().index();              // 所属するセッションID内
    DbSessionPoint.addStringProperty("centralJson").notNull();               // CentralをJSON化したデータ

    // 統計用の値, SQLのMaxでセッション単位で取得できるよう、全てインデックスを貼る
    DbSessionPoint.addStringProperty("valueFlags").notNull().index();       // 統計用フラグ
    DbSessionPoint.addIntProperty("valueHeartrate").index();        // 心拍(Max, Avgを取る)
    DbSessionPoint.addIntProperty("valueCadence").index();          // ケイデンス(Maxを取る)
    DbSessionPoint.addFloatProperty("valueSensorSpeed").index();
    // センサー由来の速度(Max, Avgを取る) 採用された場合のみ書き込まれる
    DbSessionPoint.addFloatProperty("valueGpsSpeed").index();
    DbSessionPoint.addFloatProperty("valueGpsLat").index();
    DbSessionPoint.addFloatProperty("valueGpsLng").index();
    DbSessionPoint.addFloatProperty("valueGpsAlt").index();
    // GPS由来の速度(Max, Avgを取る)    採用された場合のみ書き込まれる
    DbSessionPoint.addFloatProperty("valueFitCalories").index();       // セッション消費カロリー
    DbSessionPoint.addFloatProperty("valueFitExercise").index();       // セッション獲得エクササイズ
    DbSessionPoint.addFloatProperty("valueRecordDistanceKm").index();       // セッション合計移動距離
    DbSessionPoint.addFloatProperty("valueRecordSumAltMeter").index();       // セッション合計獲得標高
    DbSessionPoint.addFloatProperty("valueActiveDistanceKm").index();       // セッション自走距離
    DbSessionPoint.addIntProperty("valueActiveTimeMs").index();       // セッション自走時間
    // 将来的な機能予約
    DbSessionPoint.addStringProperty("valueGeohash10").index();       // 高精度ジオハッシュ
    DbSessionPoint.addStringProperty("valueGeohash7Peripherals").index();       // 100m単位の隣接情報
    DbSessionPoint.addIntProperty("valueIntervalIndex").notNull().index();       // セッション内のインターバル番号
}
